steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      echo "***********************"
      echo "$BRANCH_NAME"
      echo "***********************"
- id: 'tf init environments/dev/main1.tf'
  name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform init environments/dev/main1.tf
      else
        for dir in environments/*/
        do
          cd ${dir}
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init environments/dev/main1.tf || exit 1
          cd ../../
        done
      fi
# [START tf-plan]
- id: 'tf plan'
  name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform plan environments/dev/main1.tf
      else
        for dir in environments/*/
        do
          cd ${dir}
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan environments/dev/main1.tf || exit 1
          cd ../../
        done
      fi
# [END tf-plan]

# [START tf-apply]
- id: 'tf apply'
  name: 'hashicorp/terraform:${_TERRAFORM_VERSION}'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME
        terraform apply main1.tf -auto-approve
      else
        echo "********************** SKIPPING APPLYING ************************"
        echo "Branch '$BRANCH_NAME' does not represent an oficial environment."
        echo "*****************************************************************"
      fi 
- id: 'build remote-builder'
  name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/remote-builder', 'remote-builder' ]
- id: 'run terraform'
  name: gcr.io/$PROJECT_ID/remote-builder
  env:
    - INSTANCE_ARGS=--image-project debian-cloud --image-family debian-10 --network=${BRANCH_NAME}-vpc-network --subnet=subnet-${BRANCH_NAME}-01 --scopes=https://www.googleapis.com/auth/cloud-platform --preemptible --service-account=${_CLOUD_BUILD_SA}
    - ZONE=${_ZONE}
    - USERNAME=cloud-user
    - COMMAND=chmod +x ~/workspace/scripts/* && TERRAFORM_VERSION=${_TERRAFORM_VERSION} ~/workspace/scripts/install_terraform.sh && chmod +x ~/workspace/environments/${BRANCH_NAME}/run.sh && cd ~/workspace/environments/${BRANCH_NAME} && ./run.sh
  secretEnv: ['TF_VARS_ledger_db_password', 'TF_VARS_account_db_password','TF_VARS_root_db_password']
availableSecrets:
  secretManager:
    - versionName: projects/186160847895/secrets/dev-postgres-account-db-password/versions/latest
      env: 'TF_VARS_account_db_password'
    - versionName: projects/186160847895/secrets/dev-postgres-ledger-db-password/versions/latest
      env: 'TF_VARS_ledger_db_password'
    - versionName: projects/186160847895/secrets/dev-root-db-password/versions/latest
      env: 'TF_VARS_root_db_password'
substitutions:
    _BRANCH_NAME: ${BRANCH_NAME}
    _ZONE: europe-central2-a
    _TERRAFORM_VERSION: 0.14.11
    _CONTAINER_CLUSTER: ${BRANCH_NAME}-cluster
    _CLOUD_BUILD_SA: terraform-service-account@pol-pod11-dev-01.iam.gserviceaccount.com
timeout: 1800s
